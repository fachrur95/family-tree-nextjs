import { CacheProvider } from "@emotion/react";
import {
  ThemeProvider,
  CssBaseline,
  useMediaQuery,
  Button,
} from "@mui/material";
import createEmotionCache from "../utilities/createEmotionCache";
import lightTheme from "../styles/themes/lightTheme";
import PropTypes from "prop-types";
import "../styles/globals.css";
import DefaultLayout from "../src/Components/Layouts/default";
import darkTheme from "../styles/themes/darkTheme";
import ThemeContext from "../src/Context/ThemeContext";
import { useEffect, useRef, useState } from "react";
import Head from "next/head";
import { QueryClientProvider, QueryClient } from "react-query";
import { ReactQueryDevtools } from "react-query/devtools";
import { Hydrate } from "react-query/hydration";
import { SnackbarProvider } from "notistack";

const queryClient = new QueryClient();
const clientSideEmotionCache = createEmotionCache();

const MyApp = (props) => {
  const { Component, emotionCache = clientSideEmotionCache, pageProps } = props;
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)");
  const [darkMode, setDarkMode] = useState(prefersDarkMode);
  const Layout = Component.Layout || DefaultLayout;

  // add action to all snackbars
  const notistackRef = useRef();
  const onClickDismiss = (key) => () => {
    notistackRef.current.closeSnackbar(key);
  };

  const _setDarkMode = (newMode) => {
    localStorage.setItem("darkMode", newMode);
    setDarkMode(newMode);
  };

  useEffect(() => {
    const mode = localStorage.getItem("darkMode") === "true";
    // set mode
    setDarkMode(mode);
  }, []);

  return (
    <QueryClientProvider client={queryClient}>
      <Hydrate state={pageProps.dehydratedState}>
        <CacheProvider value={emotionCache}>
          <ThemeContext.Provider
            value={{ darkMode, setDarkMode: _setDarkMode }}
          >
            <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>
              <CssBaseline />
              <SnackbarProvider
                maxSnack={3}
                preventDuplicate
                dense
                ref={notistackRef}
                action={(key) => (
                  <Button onClick={onClickDismiss(key)}>Dismiss</Button>
                )}
              >
                <Layout>
                  <Head>
                    <title>Create Next App</title>
                    <meta
                      name="description"
                      content="Generated by create next app"
                    />
                    <link rel="icon" href="/favicon.ico" />
                  </Head>
                  <Component {...pageProps} />
                </Layout>
              </SnackbarProvider>
            </ThemeProvider>
          </ThemeContext.Provider>
        </CacheProvider>
      </Hydrate>
      <ReactQueryDevtools />
    </QueryClientProvider>
  );
};

export default MyApp;

MyApp.propTypes = {
  Component: PropTypes.elementType.isRequired,
  emotionCache: PropTypes.object,
  pageProps: PropTypes.object.isRequired,
};
